Index: pom.xml
===================================================================
--- pom.xml	(revision 3694)
+++ pom.xml	(working copy)
@@ -12,7 +12,7 @@
   <packaging>pom</packaging>
 
   <properties>
-    <servlet-api-version>3.0.pre1</servlet-api-version>
+    <servlet-api-version>3.0.pre3-SNAPSHOT</servlet-api-version>
     <activation-version>1.1</activation-version>
     <ant-version>1.6.5</ant-version>
     <jta-spec-version>1.1.1</jta-spec-version>
Index: modules/server/jetty/src/main/java/org/mortbay/jetty/servlet/Context.java
===================================================================
--- modules/server/jetty/src/main/java/org/mortbay/jetty/servlet/Context.java	(revision 3694)
+++ modules/server/jetty/src/main/java/org/mortbay/jetty/servlet/Context.java	(working copy)
@@ -313,44 +313,8 @@
                 return null;
             return new Dispatcher(context, name);
         }
-
+        
         /* ------------------------------------------------------------ */
-        /* 
-         * @see javax.servlet.ServletContext#getRequestDispatcher(java.lang.String)
-         */
-        public RequestDispatcher getRequestDispatcher(String uriInContext)
-        {
-            if (uriInContext == null)
-                return null;
-
-            if (!uriInContext.startsWith("/"))
-                return null;
-            
-            try
-            {
-                String query=null;
-                int q=0;
-                if ((q=uriInContext.indexOf('?'))>0)
-                {
-                    query=uriInContext.substring(q+1);
-                    uriInContext=uriInContext.substring(0,q);
-                }
-                if ((q=uriInContext.indexOf(';'))>0)
-                    uriInContext=uriInContext.substring(0,q);
-
-                String pathInContext=URIUtil.canonicalPath(URIUtil.decodePath(uriInContext));
-                String uri=URIUtil.addPaths(getContextPath(), uriInContext);
-                ContextHandler context=org.mortbay.jetty.servlet.Context.this;
-                return new Dispatcher(context,uri, pathInContext, query);
-            }
-            catch(Exception e)
-            {
-                Log.ignore(e);
-            }
-            return null;
-        }
-
-        /* ------------------------------------------------------------ */
         /* (non-Javadoc)
          * @see org.mortbay.jetty.handler.ContextHandler.SContext#addFilter(java.lang.String, java.lang.String, java.lang.String, java.util.Map)
          */
Index: modules/server/jetty/src/main/java/org/mortbay/jetty/Suspendable.java
===================================================================
--- modules/server/jetty/src/main/java/org/mortbay/jetty/Suspendable.java	(revision 3694)
+++ modules/server/jetty/src/main/java/org/mortbay/jetty/Suspendable.java	(working copy)
@@ -16,8 +16,13 @@
 
 import java.io.IOException;
 
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+
 import org.mortbay.io.AsyncEndPoint;
 import org.mortbay.io.EndPoint;
+import org.mortbay.jetty.servlet.Dispatcher;
 import org.mortbay.log.Log;
 import org.mortbay.thread.Timeout;
 
@@ -72,6 +77,10 @@
     protected long _timeoutMs;
     protected final Timeout.Task _timeoutTask;
     
+    protected Dispatcher _dispatcher;
+    protected ServletRequest _request;
+    protected ServletResponse _response;
+    
 
     /* ------------------------------------------------------------ */
     public Suspendable(HttpConnection connection)
@@ -90,7 +99,25 @@
         };
     }
 
+    /* ------------------------------------------------------------ */
+    public boolean isAsyncDispatch()
+    {
+        return _dispatcher!=null;
+    }
 
+    /* ------------------------------------------------------------ */
+    public void doAsyncDispatch() throws IOException, ServletException
+    {
+        System.err.println("foward with "+_dispatcher+" to "+_request);
+        Dispatcher dispatcher=_dispatcher;
+        ServletRequest request=_request;
+        ServletResponse response=_response;
+        _dispatcher=null;
+        _request=null;
+        _response=null;
+        
+        dispatcher.forward(request,response);
+    }
 
     /* ------------------------------------------------------------ */
     public long getTimeout()
@@ -326,6 +353,12 @@
     /* ------------------------------------------------------------ */
     public void resume()
     {
+        resume(null,null,null);
+    }
+    
+    /* ------------------------------------------------------------ */
+    public void resume(Dispatcher dispatcher, ServletRequest request, ServletResponse response)
+    {
         boolean dispatch=false;
         synchronized (this)
         {
@@ -333,10 +366,16 @@
             {
                 case __HANDLING:
                     _resumed=true;
+                    _dispatcher=dispatcher;
+                    _request=request;
+                    _response=response;
                     return;
                     
                 case __SUSPENDING:
                     _resumed=true;
+                    _dispatcher=dispatcher;
+                    _request=request;
+                    _response=response;
                     _state=__RESUMING;
                     return;
 
@@ -348,6 +387,9 @@
                 case __SUSPENDED:
                     dispatch=true;
                     _resumed=true;
+                    _dispatcher=dispatcher;
+                    _request=request;
+                    _response=response;
                     _state=__UNSUSPENDING;
                     break;
                     
@@ -473,6 +515,9 @@
             _resumed = false;
             _initial = true;
             _timeout = false;
+            _dispatcher=null;
+            _request=null;
+            _response=null;
             cancelTimeout();
         }
     }
Index: modules/server/jetty/src/main/java/org/mortbay/jetty/handler/ContextHandler.java
===================================================================
--- modules/server/jetty/src/main/java/org/mortbay/jetty/handler/ContextHandler.java	(revision 3699)
+++ modules/server/jetty/src/main/java/org/mortbay/jetty/handler/ContextHandler.java	(working copy)
@@ -32,6 +32,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import javax.servlet.AsyncDispatcher;
 import javax.servlet.DispatcherType;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
@@ -55,6 +56,7 @@
 import org.mortbay.jetty.MimeTypes;
 import org.mortbay.jetty.Request;
 import org.mortbay.jetty.Server;
+import org.mortbay.jetty.servlet.Dispatcher;
 import org.mortbay.jetty.webapp.WebAppClassLoader;
 import org.mortbay.log.Log;
 import org.mortbay.log.Logger;
@@ -1384,7 +1386,7 @@
          */
         public RequestDispatcher getNamedDispatcher(String name)
         {
-            return null;
+            throw new IllegalStateException("Not Supported.  Use org.mortbay.jetty.servlet.Context");
         }
 
         /* ------------------------------------------------------------ */
@@ -1417,16 +1419,81 @@
             
             return null;
         }
-
+        
         /* ------------------------------------------------------------ */
         /* 
          * @see javax.servlet.ServletContext#getRequestDispatcher(java.lang.String)
          */
         public RequestDispatcher getRequestDispatcher(String uriInContext)
         {
+            if (uriInContext == null)
+                return null;
+
+            if (!uriInContext.startsWith("/"))
+                return null;
+            
+            try
+            {
+                String query=null;
+                int q=0;
+                if ((q=uriInContext.indexOf('?'))>0)
+                {
+                    query=uriInContext.substring(q+1);
+                    uriInContext=uriInContext.substring(0,q);
+                }
+                if ((q=uriInContext.indexOf(';'))>0)
+                    uriInContext=uriInContext.substring(0,q);
+
+                String pathInContext=URIUtil.canonicalPath(URIUtil.decodePath(uriInContext));
+                String uri=URIUtil.addPaths(getContextPath(), uriInContext);
+                ContextHandler context=ContextHandler.this;
+                return new Dispatcher(context,uri, pathInContext, query);
+            }
+            catch(Exception e)
+            {
+                Log.ignore(e);
+            }
             return null;
         }
+        
+        /* ------------------------------------------------------------ */
+        /* 
+         * @see javax.servlet.ServletContext#getRequestDispatcher(java.lang.String)
+         */
+        public AsyncDispatcher getAsyncDispatcher(String uriInContext)
+        {
+            if (uriInContext == null)
+                return null;
 
+            if (!uriInContext.startsWith("/"))
+                return null;
+            
+            try
+            {
+                String query=null;
+                int q=0;
+                if ((q=uriInContext.indexOf('?'))>0)
+                {
+                    query=uriInContext.substring(q+1);
+                    uriInContext=uriInContext.substring(0,q);
+                }
+                if ((q=uriInContext.indexOf(';'))>0)
+                    uriInContext=uriInContext.substring(0,q);
+
+                String pathInContext=URIUtil.canonicalPath(URIUtil.decodePath(uriInContext));
+                String uri=URIUtil.addPaths(getContextPath(), uriInContext);
+                ContextHandler context=ContextHandler.this;
+                return new ADispatcher(context,uri, pathInContext, query);
+            }
+            catch(Exception e)
+            {
+                Log.ignore(e);
+            }
+            return null;
+        }
+
+
+
         /* ------------------------------------------------------------ */
         public URL getResource(String path) throws MalformedURLException
         {
Index: modules/server/jetty/src/main/java/org/mortbay/jetty/handler/ADispatcher.java
===================================================================
--- modules/server/jetty/src/main/java/org/mortbay/jetty/handler/ADispatcher.java	(revision 0)
+++ modules/server/jetty/src/main/java/org/mortbay/jetty/handler/ADispatcher.java	(revision 0)
@@ -0,0 +1,72 @@
+// ========================================================================
+// Copyright 199-2004 Mort Bay Consulting Pty. Ltd.
+// ------------------------------------------------------------------------
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at 
+// http://www.apache.org/licenses/LICENSE-2.0
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+// ========================================================================
+
+package org.mortbay.jetty.handler;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
+
+import javax.servlet.AsyncDispatcher;
+import javax.servlet.DispatcherType;
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.mortbay.jetty.Handler;
+import org.mortbay.jetty.HttpConnection;
+import org.mortbay.jetty.Request;
+import org.mortbay.jetty.handler.ContextHandler;
+import org.mortbay.jetty.servlet.Dispatcher;
+import org.mortbay.util.Attributes;
+import org.mortbay.util.LazyList;
+import org.mortbay.util.MultiMap;
+import org.mortbay.util.UrlEncoded;
+
+/* ------------------------------------------------------------ */
+/** Servlet RequestDispatcher.
+ * 
+ * @author Greg Wilkins (gregw)
+ */
+public class ADispatcher implements AsyncDispatcher
+{
+    Dispatcher _dispatcher;
+    
+    /* ------------------------------------------------------------ */
+    /**
+     * @param contextHandler
+     * @param uriInContext
+     * @param pathInContext
+     * @param query
+     */
+    public ADispatcher(ContextHandler contextHandler, String uri, String pathInContext, String query)
+    {
+        _dispatcher=new Dispatcher(contextHandler,uri,pathInContext,query);
+    }
+    
+    /* ------------------------------------------------------------ */
+    public void forward(ServletRequest request, ServletResponse response)
+    {
+        final Request base_request=(request instanceof Request)?((Request)request):HttpConnection.getCurrentConnection().getRequest();
+        base_request.resume(_dispatcher,request,response);
+    }
+    
+    
+};

Property changes on: modules/server/jetty/src/main/java/org/mortbay/jetty/handler/ADispatcher.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: modules/server/jetty/src/main/java/org/mortbay/jetty/HttpConnection.java
===================================================================
--- modules/server/jetty/src/main/java/org/mortbay/jetty/HttpConnection.java	(revision 3694)
+++ modules/server/jetty/src/main/java/org/mortbay/jetty/HttpConnection.java	(working copy)
@@ -531,7 +531,10 @@
 
                 if (_request.shouldHandleRequest())
                 {
-                    _server.handle(this);
+                    if (_request.isAsyncDispatch())
+                        _request.doAsyncDispatch();
+                    else
+                        _server.handle(this);
                 }
                 else
                 {
Index: modules/examples/jetty-example-webapp/src/main/java/com/acme/ChatFilter.java
===================================================================
--- modules/examples/jetty-example-webapp/src/main/java/com/acme/ChatFilter.java	(revision 3694)
+++ modules/examples/jetty-example-webapp/src/main/java/com/acme/ChatFilter.java	(working copy)
@@ -16,94 +16,135 @@
 package com.acme;
 
 import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
+import javax.servlet.AsyncDispatcher;
+import javax.servlet.Filter;
 import javax.servlet.FilterChain;
 import javax.servlet.FilterConfig;
+import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
-import org.mortbay.util.ajax.AjaxFilter;
-import org.mortbay.util.ajax.Continuation;
-import org.mortbay.util.ajax.ContinuationSupport;
 
-public class ChatFilter extends AjaxFilter
+public class ChatFilter implements Filter
 {       
     private Map chatrooms;
     
 
-    /* ------------------------------------------------------------ */
-    /* 
-     * @see org.mortbay.ajax.AjaxFilter#init(javax.servlet.FilterConfig)
-     */
+    ServletContext context;
+
     public void init(FilterConfig filterConfig) throws ServletException
     {
-        super.init(filterConfig);
+        context=filterConfig.getServletContext();
         chatrooms=new HashMap();
     }
-    
+
     /* ------------------------------------------------------------ */
-    /* 
-     * @see org.mortbay.ajax.AjaxFilter#destroy()
-     */
     public void destroy()
     {
-        super.destroy();
         chatrooms.clear();
         chatrooms=null;
+        context=null;
     }
 
+    /* ------------------------------------------------------------ */
+    /**
+     * @return Returns the context.
+     */
+    public ServletContext getContext()
+    {
+        return context;
+    }
 
     /* ------------------------------------------------------------ */
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException
     {
-        HttpSession session = ((HttpServletRequest)request).getSession(true);
-        super.doFilter(request,response,chain);
+        // ensure a session
+        ((HttpServletRequest)request).getSession(true);
+
+        String method=request.getParameter("ajax");
+        String message=request.getParameter("message");
+        
+        if (method==null || method.length()==0)
+            chain.doFilter(request, response);
+        else
+        {
+            HttpServletRequest srequest = (HttpServletRequest)request;
+            HttpServletResponse sresponse = (HttpServletResponse) response;
+            
+            String roomName=request.getParameter("room");
+            if (roomName==null)
+                roomName="0";
+            Map room = null;
+            synchronized(this)
+            {
+                room=(Map)chatrooms.get(roomName);
+                if (room==null)
+                {
+                    room=new HashMap();
+                    chatrooms.put(roomName,room);
+                }
+            }
+                
+            
+            
+            StringWriter sout = new StringWriter();
+            PrintWriter out = new PrintWriter(sout);
+            
+            out.println("<ajax-response>");
+            CometResponse cresponse =new CometResponse(srequest,out);
+
+            if ("poll".equals(method))
+            {
+                doPoll(room,srequest,cresponse);
+                if (srequest.isSuspended())
+                    return;
+            }
+            else if ("join".equals(method))
+                doJoinChat(room,message,srequest,cresponse);
+            else if ("chat".equals(method))
+                doChat(room,message,srequest,cresponse);
+            else if ("leave".equals(method))
+                doLeaveChat(room,message,srequest,cresponse);
+            else
+                throw new IllegalStateException();
+            
+            out.println("</ajax-response>");
+            
+            byte[] comet = sout.toString().getBytes("UTF-8");
+            sresponse.setHeader( "Pragma", "no-cache" );
+            sresponse.addHeader( "Cache-Control", "must-revalidate,no-cache,no-store" );
+            sresponse.setDateHeader("Expires", 0);
+            sresponse.setContentType("text/xml; charset=UTF-8");
+            sresponse.setContentLength(comet.length);
+            sresponse.getOutputStream().write(comet);
+            sresponse.flushBuffer();
+        }
     }
     
     /* ------------------------------------------------------------ */
     /* 
      * @see org.mortbay.ajax.AjaxFilter#handle(java.lang.String, javax.servlet.http.HttpServletRequest, org.mortbay.ajax.AjaxFilter.AjaxResponse)
      */
-    public void handle(String method, String message, HttpServletRequest request, AjaxResponse response)
+    public void handle(String method, String message, HttpServletRequest request, CometResponse response)
     {
         request.getSession(true);
         
-        String roomName=request.getParameter("room");
-        if (roomName==null)
-            roomName="0";
-        Map room = null;
-        synchronized(this)
-        {
-            room=(Map)chatrooms.get(roomName);
-            if (room==null)
-            {
-                room=new HashMap();
-                chatrooms.put(roomName,room);
-            }
-        }
-            
-        if ("join".equals(method))
-            doJoinChat(room,message,request, response);
-        else if ("chat".equals(method))
-            doChat(room,message,request,response);
-        else if ("poll".equals(method))
-            doPoll(room,request,response);
-        else if ("leave".equals(method))
-            doLeaveChat(room,message,request,response);
-        else
-            super.handle(method, message,request, response);   
     }
 
     /* ------------------------------------------------------------ */
-    private void doJoinChat(Map room, String name, HttpServletRequest request, AjaxResponse response)
+    private void doJoinChat(Map room, String name, HttpServletRequest request, CometResponse response)
     {
         HttpSession session = request.getSession(true);
         String id = session.getId();
@@ -132,7 +173,7 @@
     
 
     /* ------------------------------------------------------------ */
-    private void doLeaveChat(Map room, String name, HttpServletRequest request, AjaxResponse response)
+    private void doLeaveChat(Map room, String name, HttpServletRequest request, CometResponse response)
     {
         HttpSession session = request.getSession(true);
         String id = session.getId();
@@ -156,7 +197,7 @@
 
 
     /* ------------------------------------------------------------ */
-    private void doChat(Map room, String text, HttpServletRequest request, AjaxResponse response)
+    private void doChat(Map room, String text, HttpServletRequest request, CometResponse response)
     {
         HttpSession session = request.getSession(true);
         String id = session.getId();
@@ -174,7 +215,7 @@
 
 
     /* ------------------------------------------------------------ */
-    private void doPoll(Map room, HttpServletRequest request, AjaxResponse response)
+    private void doPoll(Map room, HttpServletRequest request, CometResponse response)
     {
         HttpSession session = request.getSession(true);
         String id = session.getId();
@@ -198,8 +239,8 @@
                 member.setPoll(null);
             else if (!member.hasMessages())
             {   
+                request.suspend(timeoutMS);
                 member.setPoll(request);
-                request.suspend(timeoutMS);
                 return;
             }
             
@@ -245,7 +286,7 @@
         }
     }
     
-    private void sendMembers(Map room, AjaxResponse response)
+    private void sendMembers(Map room, CometResponse response)
     {
         StringBuffer buf = new StringBuffer();
         buf.append("<ul>\n");
@@ -296,7 +337,7 @@
         private HttpSession _session;
         private String _name;
         private List _messages = new ArrayList();
-        private ServletRequest _request;;
+        private HttpServletRequest _request;;
         
         Member(HttpSession session, String name)
         {
@@ -335,7 +376,7 @@
         /**
          * @param continuation The continuation to set.
          */
-        public void setPoll(ServletRequest poll)
+        public void setPoll(HttpServletRequest poll)
         {
             _request=poll;
         }
@@ -346,8 +387,12 @@
             if (_name==null)
                 return;
             _messages.add(event);
+            
             if (_request!=null)
-                _request.resume();
+            {
+                AsyncDispatcher as = context.getAsyncDispatcher(_request.getRequestURI());
+                as.forward(_request,_request.getServletResponse());
+            }
         }
 
         /* ------------------------------------------------------------ */
@@ -366,7 +411,7 @@
         }
 
         /* ------------------------------------------------------------ */
-        public boolean sendMessages(AjaxResponse response)
+        public boolean sendMessages(CometResponse response)
         {
             synchronized (this)
             {
@@ -383,4 +428,63 @@
         }
 
     }
+
+    public static String encodeText(String s)
+    {
+        StringBuffer buf=null;
+        for (int i=0;i<s.length();i++)
+        {
+            char c=s.charAt(i);
+            String r=null;
+            switch(c)
+            {
+                case '<': r="&lt;"; break;
+                case '>': r="&gt;"; break;
+                case '&': r="&amp;"; break;
+            }
+            
+            if (r!=null)
+            {
+                if (buf==null)
+                {
+                    buf=new StringBuffer(s.length()*2);
+                    buf.append(s.subSequence(0,i));
+                }
+                buf.append(r);
+            }
+            else if (buf!=null)
+                buf.append(c);
+        }
+        
+        if (buf!=null)
+            return buf.toString();
+        return s;
+    }
+    
+    public static class CometResponse
+    {
+        private HttpServletRequest request;
+        private PrintWriter out;
+        private CometResponse(HttpServletRequest request,PrintWriter out)
+        {this.out=out; this.request=request;}
+        
+        public void elementResponse(String id,String element)
+        {
+            if (id==null)
+                id = request.getParameter("id");
+            if (id==null)
+                id="unknown";
+            out.println("<response type=\"element\" id=\""+id+"\">"+element+"</response>");
+        }
+        
+        public void objectResponse(String id,String element)
+        {
+            if (id==null)
+                id = request.getParameter("id");
+            if (id==null)
+                id="unknown";
+            
+            out.println("<response type=\"object\" id=\""+id+"\">"+element+"</response>");
+        }
+    }
 }
Index: modules/examples/jetty-example-webapp/src/main/webapp/chat/chat.html
===================================================================
--- modules/examples/jetty-example-webapp/src/main/webapp/chat/chat.html	(revision 3694)
+++ modules/examples/jetty-example-webapp/src/main/webapp/chat/chat.html	(working copy)
@@ -1,19 +1,13 @@
 <html>
 <head>
-    <title>Jetty chat</title>
+    <title>Simple Async Chat</title>
     <script type="text/javascript" src="../concat?/js/behaviour.js&/js/ajax.js&/chat/chat.js"></script>
     <link rel="stylesheet" type="text/css" href="chat.css"></link>
 </head>
 <body onunload="room.leave()">
-<h1>Jetty AJAX Chat</h1>
-Three really important things about this chat room demo:<ul>
-<li>It has really HORRID Styling.  Please feel free to donate a pretty css :-)</li>
-<li>It is written using js techniques provided by
-<a href="http://bennolan.com/behaviour/">Behaviour</a> and
-<li>It uses Jetty6 <a href="/javadoc/org/mortbay/util/ajax/Continuation.html">Continuations</a>. No threads 
-are used when waiting for async events (see below).
-</li>
-</ul>
+<h1>Async Servlet Chat</h1>
+Chat room that demonstrates the asynchronous features of Serlvet 3.0.
+Best not to copy this, but to use a frame work like cometd that implements this much better.
 
 
 <div id="chatroom">
@@ -30,67 +24,6 @@
   </div>
  </div>
 
- <h3>How this works</h3>
- This chat room is put together with html, javascript and a filter as follows:
- <ul>
- <li><p>The chat.html file provides the basic layout for the page, including this text and a bunch of
- <code>div</code> elements that define the layout of the chat room.  This html will render well
- without any javascript etc.</p></li>
 
- <li><p>The chat.html file includes the default.js file, which simply includes
- javascript library of <a href="http://bennolan.com/behaviour/">Behaviour</a>.
 
- <li><p>The chat.html file includes the chat.js script which is the client side smarts of the chat room:</p>
- <ul>
-         <li><p>Using Behaviour, the DOM model of chat.html is enhanced with onclick and onkeypress functions
-         to trigger the dynamic interations.</p>
-         </li>
-         <li><p>Using XHR, a long polling loop is started for events.</p></li>
-         <li><p>Using XHR, any chat entered is sent to the server.</p></li>
- </ul>
- </li>
-
- <li><p>On the sever side, the ChatFilter is instantiated to filter requests to chat.html:</p>
-    <ul>
-            <li><p>The ChatFilter extends AjaxFilter, which identifies requests that are AJAX requests and
-            gives assistance with formatting the AJAX responses.  All other requests are passed normally.
-            </p></li>
-
-            <li><p>The ChatFilter provides methods for join, leave, chat and getEvents.  Most of these are
-            fairly straight forward and just manipulatet state and send the appopriate AJAX response.</p></li>
-
-            <li><p>The smarts are in the getEvents method.  This method is a poll from the client for any
-            events on the server for the given member.   If there were no events and the server simply
-            replied with an empty response, this poll would become a busy poll and consume CPU on both
-            client and server.</p>
-
-            <p>
-            To avoid this, normal AJAX servers will simply wait for a short period (eg. 30 seconds).
-            If an event occurs in this time, the response is sent immediately. If the period times out,
-            then an empty response is sent.  Either way the client will then poll again for more events.
-            </p>
-
-            <p>
-            But for servlets, this waiting for events, is done in the request handler, when a thread has
-            been allocated.  Thus it makes it very difficult to scale an AJAX server to thousands of users
-            as you will need thousands of threads - mostly idle waiting for events.
-            </p>
-
-            <p>
-            Thus Jetty 6 introduces <a href="/javadoc/org/mortbay/jetty/util/Continuation.html">Continuations</a>, which allows the handling of a servlet request to
-            be suspended until either a timeout occurs or an asynchronous event calls resume on the
-            continuation.  This allows threadless waiting and thus permits an AJAX server to scale without
-            consuming vaste numbers of threads.
-            </p>
-            </li>
-
-    </ul>
-
- </li>
-
-
-
-
-
-
 </body>
Index: modules/examples/jetty-example-webapp/pom.xml
===================================================================
--- modules/examples/jetty-example-webapp/pom.xml	(revision 3694)
+++ modules/examples/jetty-example-webapp/pom.xml	(working copy)
@@ -135,7 +135,6 @@
     <dependency>
       <groupId>org.mortbay.jetty</groupId>
       <artifactId>servlet-api</artifactId>
-      <version>3.0.pre1</version>
       <scope>provided</scope>
     </dependency>
     <dependency>
