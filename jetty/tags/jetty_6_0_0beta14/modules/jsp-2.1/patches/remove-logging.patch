Index: VERSION.TXT
===================================================================
--- VERSION.TXT	(revision 378)
+++ VERSION.TXT	(working copy)
@@ -1 +1,3 @@
 http://svn.apache.org/repos/asf/tomcat/jasper/tc6.0.x Revision: 386567
+
+Very dump hacking out of JCL.  This version is dangerous as it logs NOTHING!
Index: src/main/java/org/apache/jasper/JspC.java
===================================================================
--- src/main/java/org/apache/jasper/JspC.java	(revision 378)
+++ src/main/java/org/apache/jasper/JspC.java	(working copy)
@@ -39,8 +39,6 @@
 import java.util.StringTokenizer;
 import java.util.Vector;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.compiler.Compiler;
 import org.apache.jasper.compiler.JspConfig;
 import org.apache.jasper.compiler.JspRuntimeContext;
@@ -93,8 +91,6 @@
     public static final String DEFAULT_IE_CLASS_ID =
             "clsid:8AD9C840-044E-11D1-B3E9-00805F499D93";
 
-    // Logger
-    private static Log log = LogFactory.getLog(JspC.class);
 
     private static final String SWITCH_VERBOSE = "-v";
     private static final String SWITCH_HELP = "-help";
@@ -988,9 +984,6 @@
 
             // Generate mapping
             generateWebMapping( file, clctxt );
-            if ( showSuccess ) {
-                log.info( "Built File: " + file );
-            }
 
         } catch (JasperException je) {
             Throwable rootCause = je;
@@ -998,24 +991,13 @@
                     && ((JasperException) rootCause).getRootCause() != null) {
                 rootCause = ((JasperException) rootCause).getRootCause();
             }
-            if (rootCause != je) {
-                log.error(Localizer.getMessage("jspc.error.generalException",
-                                               file),
-                          rootCause);
-            }
 
             // Bugzilla 35114.
             if(getFailOnError()) {
                 throw je;
-            } else {
-                log.error(je.getMessage());
-            }
+            } 
 
         } catch (Exception e) {
-            if ((e instanceof FileNotFoundException) && log.isWarnEnabled()) {
-                log.warn(Localizer.getMessage("jspc.error.fileDoesNotExist",
-                                              e.getMessage()));
-            }
             throw new JasperException(e);
         } finally {
             if(originalClassLoader != null) {
@@ -1068,9 +1050,7 @@
      * @throws JasperException If an error occurs
      */
     public void execute() throws JasperException {
-        if(log.isDebugEnabled()) {
-            log.debug("execute() starting for " + pages.size() + " pages.");
-        }
+       
 
         try {
             if (uriRoot == null) {
@@ -1118,11 +1098,6 @@
                     fjsp = new File(uriRootF, nextjsp);
                 }
                 if (!fjsp.exists()) {
-                    if (log.isWarnEnabled()) {
-                        log.warn
-                            (Localizer.getMessage
-                             ("jspc.error.fileDoesNotExist", fjsp.toString()));
-                    }
                     continue;
                 }
                 String s = fjsp.getAbsolutePath();
@@ -1155,9 +1130,7 @@
             }
             throw je;
         } finally {
-            if (loader != null) {
-                LogFactory.release(loader);
-            }
+            
         }
     }
 
@@ -1295,10 +1268,7 @@
                     if( libs[i].length() <5 ) continue;
                     String ext=libs[i].substring( libs[i].length() - 4 );
                     if (! ".jar".equalsIgnoreCase(ext)) {
-                        if (".tld".equalsIgnoreCase(ext)) {
-                            log.warn("TLD files should not be placed in "
-                                     + "/WEB-INF/lib");
-                        }
+                        
                         continue;
                     }
                     try {
@@ -1343,11 +1313,7 @@
                     if (g.exists() && g.isDirectory()) {
                         uriRoot = f.getCanonicalPath();
                         uriBase = tUriBase;
-                        if (log.isInfoEnabled()) {
-                            log.info(Localizer.getMessage(
-                                        "jspc.implicit.uriRoot",
-                                        uriRoot));
-                        }
+                       
                         break;
                     }
                     if (f.exists() && f.isDirectory()) {
Index: src/main/java/org/apache/jasper/JspCompilationContext.java
===================================================================
--- src/main/java/org/apache/jasper/JspCompilationContext.java	(revision 378)
+++ src/main/java/org/apache/jasper/JspCompilationContext.java	(working copy)
@@ -51,9 +51,6 @@
  */
 public class JspCompilationContext {
 
-    protected org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(JspCompilationContext.class);
-
     private Hashtable tagFileJarUrls;
     private boolean isPackagedTagFile;
 
@@ -232,9 +229,6 @@
         try {
             compiler = (Compiler) Class.forName(className).newInstance();
         } catch (Throwable t) {
-            if (log.isDebugEnabled()) {
-                log.debug(Localizer.getMessage("jsp.error.compiler"), t);
-            }
         }
         return compiler;
     }
Index: src/main/java/org/apache/jasper/runtime/PageContextImpl.java
===================================================================
--- src/main/java/org/apache/jasper/runtime/PageContextImpl.java	(revision 378)
+++ src/main/java/org/apache/jasper/runtime/PageContextImpl.java	(working copy)
@@ -47,8 +47,6 @@
 import javax.servlet.jsp.el.VariableResolver;
 import javax.servlet.jsp.tagext.BodyContent;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.el.ELContextImpl;
@@ -72,7 +70,6 @@
 public class PageContextImpl extends PageContext {
 
 	// Logger
-	private static Log log = LogFactory.getLog(PageContextImpl.class);
 
 	private BodyContentImpl[] outs;
 
@@ -206,7 +203,6 @@
 				((JspWriterImpl) out).flushBuffer();
 			}
 		} catch (IOException ex) {
-			log.warn("Internal error flushing the buffer in release()");
 		}
 
 		servlet = null;
Index: src/main/java/org/apache/jasper/runtime/JspFactoryImpl.java
===================================================================
--- src/main/java/org/apache/jasper/runtime/JspFactoryImpl.java	(revision 378)
+++ src/main/java/org/apache/jasper/runtime/JspFactoryImpl.java	(working copy)
@@ -28,8 +28,6 @@
 import javax.servlet.jsp.PageContext;
 
 import org.apache.jasper.util.SimplePool;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 /**
  * Implementation of JspFactory.
@@ -39,7 +37,6 @@
 public class JspFactoryImpl extends JspFactory {
 
     // Logger
-    private Log log = LogFactory.getLog(JspFactoryImpl.class);
 
     private static final String SPEC_VERSION = "2.0";
     private static final boolean USE_POOL = true;
@@ -108,7 +105,6 @@
             return pc;
         } catch (Throwable ex) {
             /* FIXME: need to do something reasonable here!! */
-            log.fatal("Exception initializing page context", ex);
             return null;
         }
     }
Index: src/main/java/org/apache/jasper/runtime/HttpJspBase.java
===================================================================
--- src/main/java/org/apache/jasper/runtime/HttpJspBase.java	(revision 378)
+++ src/main/java/org/apache/jasper/runtime/HttpJspBase.java	(working copy)
@@ -59,9 +59,6 @@
                     factory.getClass().getClassLoader().loadClass( basePackage +
                                                                    "servlet.JspServletWrapper");
                 } catch (ClassNotFoundException ex) {
-                    org.apache.commons.logging.LogFactory.getLog( HttpJspBase.class )
-                        .error("Jasper JspRuntimeContext preload of class failed: " +
-                                       ex.getMessage(), ex);
                 }
             }
             JspFactory.setDefaultFactory(factory);
Index: src/main/java/org/apache/jasper/servlet/JspServlet.java
===================================================================
--- src/main/java/org/apache/jasper/servlet/JspServlet.java	(revision 378)
+++ src/main/java/org/apache/jasper/servlet/JspServlet.java	(working copy)
@@ -27,9 +27,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import org.apache.jasper.Constants;
 import org.apache.jasper.EmbeddedServletOptions;
 import org.apache.jasper.Options;
@@ -55,7 +52,6 @@
 public class JspServlet extends HttpServlet {
 
     // Logger
-    private Log log = LogFactory.getLog(JspServlet.class);
 
     private ServletContext context;
     private ServletConfig config;
@@ -88,7 +84,6 @@
                 options = (Options) ctor.newInstance(args);
             } catch (Throwable e) {
                 // Need to localize this.
-                log.warn("Failed to load engineOptionsClass", e);
                 // Use the default Options implementation
                 options = new EmbeddedServletOptions(config, context);
             }
@@ -98,11 +93,6 @@
         }
         rctxt = new JspRuntimeContext(context, options);
         
-        if (log.isDebugEnabled()) {
-            log.debug(Localizer.getMessage("jsp.message.scratch.dir.is",
-                    options.getScratchDir().toString()));
-            log.debug(Localizer.getMessage("jsp.message.dont.modify.servlets"));
-        }
     }
 
 
@@ -243,21 +233,6 @@
             }
         }
 
-        if (log.isDebugEnabled()) {	    
-            log.debug("JspEngine --> " + jspUri);
-            log.debug("\t     ServletPath: " + request.getServletPath());
-            log.debug("\t        PathInfo: " + request.getPathInfo());
-            log.debug("\t        RealPath: " + context.getRealPath(jspUri));
-            log.debug("\t      RequestURI: " + request.getRequestURI());
-            log.debug("\t     QueryString: " + request.getQueryString());
-            log.debug("\t  Request Params: ");
-            Enumeration e = request.getParameterNames();
-            while (e.hasMoreElements()) {
-                String name = (String) e.nextElement();
-                log.debug("\t\t " + name + " = " 
-                          + request.getParameter(name));
-            }
-        }
 
         try {
             boolean precompile = preCompile(request);
@@ -275,10 +250,6 @@
     }
 
     public void destroy() {
-        if (log.isDebugEnabled()) {
-            log.debug("JspServlet.destroy()");
-        }
-
         rctxt.destroy();
     }
 
Index: src/main/java/org/apache/jasper/servlet/JspServletWrapper.java
===================================================================
--- src/main/java/org/apache/jasper/servlet/JspServletWrapper.java	(revision 378)
+++ src/main/java/org/apache/jasper/servlet/JspServletWrapper.java	(working copy)
@@ -37,8 +37,6 @@
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.jsp.tagext.TagInfo;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
@@ -69,7 +67,6 @@
 public class JspServletWrapper {
 
     // Logger
-    private Log log = LogFactory.getLog(JspServletWrapper.class);
 
     private Servlet theServlet;
     private String jspUri;
@@ -365,9 +362,6 @@
                     response.sendError(HttpServletResponse.SC_NOT_FOUND, 
                                       ex.getMessage());
                 } catch (IllegalStateException ise) {
-                    log.error(Localizer.getMessage("jsp.error.file.not.found",
-						   ex.getMessage()),
-			      ex);
                 }
             }
         } catch (ServletException ex) {
Index: src/main/java/org/apache/jasper/servlet/JspCServletContext.java
===================================================================
--- src/main/java/org/apache/jasper/servlet/JspCServletContext.java	(revision 378)
+++ src/main/java/org/apache/jasper/servlet/JspCServletContext.java	(working copy)
@@ -426,5 +426,9 @@
     }
 
 
+    public String getContextPath()
+    {
+	return null; // TODO XXX really implement this
+    }
 
 }
Index: src/main/java/org/apache/jasper/EmbeddedServletOptions.java
===================================================================
--- src/main/java/org/apache/jasper/EmbeddedServletOptions.java	(revision 378)
+++ src/main/java/org/apache/jasper/EmbeddedServletOptions.java	(working copy)
@@ -27,8 +27,6 @@
 import org.apache.jasper.compiler.TagPluginManager;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.xmlparser.ParserUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 /**
  * A class to hold all init parameters specific to the JSP engine. 
@@ -39,9 +37,6 @@
  */
 public final class EmbeddedServletOptions implements Options {
     
-    // Logger
-    private Log log = LogFactory.getLog(EmbeddedServletOptions.class);
-    
     private Properties settings = new Properties();
     
     /**
@@ -390,10 +385,6 @@
                 this.keepGenerated = true;
             } else if (keepgen.equalsIgnoreCase("false")) {
                 this.keepGenerated = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.keepgen"));
-                }
             }
         }
         
@@ -404,11 +395,7 @@
                 trimSpaces = true;
             } else if (trimsp.equalsIgnoreCase("false")) {
                 trimSpaces = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.trimspaces"));
-                }
-            }
+            } 
         }
         
         this.isPoolingEnabled = true;
@@ -418,11 +405,7 @@
                 && !poolingEnabledParam.equalsIgnoreCase("true")) {
             if (poolingEnabledParam.equalsIgnoreCase("false")) {
                 this.isPoolingEnabled = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.enablePooling"));
-                }		       	   
-            }
+            } 
         }
         
         String mapFile = config.getInitParameter("mappedfile"); 
@@ -431,11 +414,7 @@
                 this.mappedFile = true;
             } else if (mapFile.equalsIgnoreCase("false")) {
                 this.mappedFile = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.mappedFile"));
-                }
-            }
+            } 
         }
         
         String senderr = config.getInitParameter("sendErrToClient");
@@ -444,11 +423,7 @@
                 this.sendErrorToClient = true;
             } else if (senderr.equalsIgnoreCase("false")) {
                 this.sendErrorToClient = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.sendErrToClient"));
-                }
-            }
+            } 
         }
         
         String debugInfo = config.getInitParameter("classdebuginfo");
@@ -457,11 +432,7 @@
                 this.classDebugInfo  = true;
             } else if (debugInfo.equalsIgnoreCase("false")) {
                 this.classDebugInfo  = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.classDebugInfo"));
-                }
-            }
+            } 
         }
         
         String checkInterval = config.getInitParameter("checkInterval");
@@ -470,14 +441,10 @@
                 this.checkInterval = Integer.parseInt(checkInterval);
                 if (this.checkInterval == 0) {
                     this.checkInterval = 300;
-                    if (log.isWarnEnabled()) {
-                        log.warn(Localizer.getMessage("jsp.warning.checkInterval"));
-                    }
+                    
                 }
             } catch(NumberFormatException ex) {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.checkInterval"));
-                }
+             
             }
         }
         
@@ -486,9 +453,7 @@
             try {
                 this.modificationTestInterval = Integer.parseInt(modificationTestInterval);
             } catch(NumberFormatException ex) {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.modificationTestInterval"));
-                }
+               
             }
         }
         
@@ -499,9 +464,7 @@
             } else if (development.equalsIgnoreCase("false")) {
                 this.development = false;
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.development"));
-                }
+               
             }
         }
         
@@ -512,9 +475,7 @@
             } else if (suppressSmap.equalsIgnoreCase("false")) {
                 isSmapSuppressed = false;
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.suppressSmap"));
-                }
+               
             }
         }
         
@@ -525,9 +486,7 @@
             } else if (dumpSmap.equalsIgnoreCase("false")) {
                 isSmapDumped = false;
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.dumpSmap"));
-                }
+               
             }
         }
         
@@ -538,9 +497,7 @@
             } else if (genCharArray.equalsIgnoreCase("false")) {
                 genStringAsCharArray = false;
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.genchararray"));
-                }
+               
             }
         }
         
@@ -552,9 +509,7 @@
             } else if (errBeanClass.equalsIgnoreCase("false")) {
                 errorOnUseBeanInvalidClassAttribute = false;
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.errBean"));
-                }
+               
             }
         }
         
@@ -584,15 +539,10 @@
             }
         }      
         if (this.scratchDir == null) {
-            log.fatal(Localizer.getMessage("jsp.error.no.scratch.dir"));
+           
             return;
         }
         
-        if (!(scratchDir.exists() && scratchDir.canRead() &&
-                scratchDir.canWrite() && scratchDir.isDirectory()))
-            log.fatal(Localizer.getMessage("jsp.error.bad.scratch.dir",
-                    scratchDir.getAbsolutePath()));
-        
         this.compiler = config.getInitParameter("compiler");
         
         String compilerTargetVM = config.getInitParameter("compilerTargetVM");
@@ -616,11 +566,7 @@
                 this.fork = true;
             } else if (fork.equalsIgnoreCase("false")) {
                 this.fork = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.fork"));
-                }
-            }
+            } 
         }
         
         String xpoweredBy = config.getInitParameter("xpoweredBy"); 
@@ -629,10 +575,6 @@
                 this.xpoweredBy = true;
             } else if (xpoweredBy.equalsIgnoreCase("false")) {
                 this.xpoweredBy = false;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage("jsp.warning.xpoweredBy"));
-                }
             }
         }
         
Index: src/main/java/org/apache/jasper/security/SecurityClassLoad.java
===================================================================
--- src/main/java/org/apache/jasper/security/SecurityClassLoad.java	(revision 378)
+++ src/main/java/org/apache/jasper/security/SecurityClassLoad.java	(working copy)
@@ -27,9 +27,6 @@
 
 public final class SecurityClassLoad {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( SecurityClassLoad.class );
-
     public static void securityClassLoad(ClassLoader loader){
 
         if( System.getSecurityManager() == null ){
@@ -104,7 +101,7 @@
             loader.loadClass( basePackage +
                 "runtime.JspWriterImpl$1");
         } catch (ClassNotFoundException ex) {
-            log.error("SecurityClassLoad", ex);
+           
         }
     }
 }
Index: src/main/java/org/apache/jasper/compiler/JspRuntimeContext.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/JspRuntimeContext.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/JspRuntimeContext.java	(working copy)
@@ -33,8 +33,6 @@
 import javax.servlet.ServletContext;
 import javax.servlet.jsp.JspFactory;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
@@ -58,7 +56,6 @@
 public final class JspRuntimeContext implements Runnable {
 
     // Logger
-    private Log log = LogFactory.getLog(JspRuntimeContext.class);
 
     /*
      * Counts how many times the webapp's JSPs have been reloaded.
@@ -97,15 +94,6 @@
                 (URLClassLoader)this.getClass().getClassLoader();
         }
 
-	if (log.isDebugEnabled()) {
-	    if (parentClassLoader != null) {
-		log.debug(Localizer.getMessage("jsp.message.parent_class_loader_is",
-					       parentClassLoader.toString()));
-	    } else {
-		log.debug(Localizer.getMessage("jsp.message.parent_class_loader_is",
-					       "<none>"));
-	    }
-        }
 
         initClassPath();
 
@@ -339,9 +327,6 @@
 
         classpath = cpath.toString() + cp;
 
-        if(log.isDebugEnabled()) {
-            log.debug("Compilation classpath initialized: " + getClassPath());
-        }
     }
 
     /**
@@ -515,7 +500,7 @@
             try {
                 checkCompile();
             } catch (Throwable t) {
-                log.error("Exception checking if recompile needed: ", t);
+               
             }
         }
         
Index: src/main/java/org/apache/jasper/compiler/JDTCompiler.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/JDTCompiler.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/JDTCompiler.java	(working copy)
@@ -67,9 +67,6 @@
         throws FileNotFoundException, JasperException, Exception {
 
         long t1 = 0;
-        if (log.isDebugEnabled()) {
-            t1 = System.currentTimeMillis();
-        }
         
         final String sourceFile = ctxt.getServletJavaFileName();
         final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();
@@ -115,7 +112,6 @@
                         buf.getChars(0, result.length, result, 0);
                     }
                 } catch (IOException e) {
-                    log.error("Compilation error", e);
                 }
                 return result;
             }
@@ -201,9 +197,9 @@
                                 new NameEnvironmentAnswer(classFileReader, null);
                         }
                     } catch (IOException exc) {
-                        log.error("Compilation error", exc);
+                        
                     } catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException exc) {
-                        log.error("Compilation error", exc);
+                        
                     } finally {
                         if (is != null) {
                             try {
@@ -292,7 +288,6 @@
                 settings.put(CompilerOptions.OPTION_Source,
                              CompilerOptions.VERSION_1_5);
             } else {
-                log.warn("Unknown source VM " + opt + " ignored.");
                 settings.put(CompilerOptions.OPTION_Source,
                         CompilerOptions.VERSION_1_5);
             }
@@ -321,7 +316,6 @@
                 settings.put(CompilerOptions.OPTION_TargetPlatform,
                              CompilerOptions.VERSION_1_5);
             } else {
-                log.warn("Unknown target VM " + opt + " ignored.");
                 settings.put(CompilerOptions.OPTION_TargetPlatform,
                         CompilerOptions.VERSION_1_5);
             }
@@ -349,7 +343,6 @@
                                                 (name, pageNodes, new StringBuffer(problem.getMessage()), 
                                                         problem.getSourceLineNumber()));
                                     } catch (JasperException e) {
-                                        log.error("Error visiting node", e);
                                     }
                                 }
                             }
@@ -380,7 +373,6 @@
                             }
                         }
                     } catch (IOException exc) {
-                        log.error("Compilation error", exc);
                     }
                 }
             };
@@ -409,11 +401,6 @@
             errDispatcher.javacError(jeds);
         }
         
-        if( log.isDebugEnabled() ) {
-            long t2=System.currentTimeMillis();
-            log.debug("Compiled " + ctxt.getServletJavaFileName() + " "
-                      + (t2-t1) + "ms");
-        }
 
         if (ctxt.isPrototypeMode()) {
             return;
Index: src/main/java/org/apache/jasper/compiler/JspConfig.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/JspConfig.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/JspConfig.java	(working copy)
@@ -23,8 +23,6 @@
 
 import javax.servlet.ServletContext;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.xmlparser.ParserUtils;
 import org.apache.jasper.xmlparser.TreeNode;
@@ -42,7 +40,6 @@
     private static final String WEB_XML = "/WEB-INF/web.xml";
 
     // Logger
-    private Log log = LogFactory.getLog(JspConfig.class);
 
     private Vector jspProperties = null;
     private ServletContext ctxt;
@@ -171,11 +168,6 @@
                         boolean isStar = "*".equals(extension);
                         if ((path == null && (extension == null || isStar))
                                 || (path != null && !isStar)) {
-                            if (log.isWarnEnabled()) {
-			        log.warn(Localizer.getMessage(
-                                    "jsp.warning.bad.urlpattern.propertygroup",
-                                    urlPattern));
-                            }
                             continue;
                         }
                     }
Index: src/main/java/org/apache/jasper/compiler/SmapUtil.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/SmapUtil.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/SmapUtil.java	(working copy)
@@ -43,9 +43,6 @@
  */
 public class SmapUtil {
 
-    private org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( SmapUtil.class );
-
     //*********************************************************************
     // Constants
 
@@ -188,9 +185,6 @@
     // Installation logic (from Robert Field, JSR-045 spec lead)
     private static class SDEInstaller {
 
-        private org.apache.commons.logging.Log log=
-            org.apache.commons.logging.LogFactory.getLog( SDEInstaller.class );
-
         static final String nameSDE = "SourceDebugExtension";
 
         byte[] orig;
@@ -287,8 +281,6 @@
             copy(4 + 2 + 2); // magic min/maj version
             int constantPoolCountPos = genPos;
             int constantPoolCount = readU2();
-            if (log.isDebugEnabled())
-                log.debug("constant pool count: " + constantPoolCount);
             writeU2(constantPoolCount);
 
             // copy old constant pool return index of SDE symbol, if found
@@ -302,32 +294,22 @@
                 ++constantPoolCount;
                 randomAccessWriteU2(constantPoolCountPos, constantPoolCount);
 
-                if (log.isDebugEnabled())
-                    log.debug("SourceDebugExtension not found, installed at: " + sdeIndex);
             } else {
-                if (log.isDebugEnabled())
-                    log.debug("SourceDebugExtension found at: " + sdeIndex);
             }
             copy(2 + 2 + 2); // access, this, super
             int interfaceCount = readU2();
             writeU2(interfaceCount);
-            if (log.isDebugEnabled())
-                log.debug("interfaceCount: " + interfaceCount);
             copy(interfaceCount * 2);
             copyMembers(); // fields
             copyMembers(); // methods
             int attrCountPos = genPos;
             int attrCount = readU2();
             writeU2(attrCount);
-            if (log.isDebugEnabled())
-                log.debug("class attrCount: " + attrCount);
             // copy the class attributes, return true if SDE attr found (not copied)
             if (!copyAttrs(attrCount)) {
                 // we will be adding SDE and it isn't already counted
                 ++attrCount;
                 randomAccessWriteU2(attrCountPos, attrCount);
-                if (log.isDebugEnabled())
-                    log.debug("class attrCount incremented");
             }
             writeAttrForSDE(sdeIndex);
         }
@@ -335,14 +317,10 @@
         void copyMembers() {
             int count = readU2();
             writeU2(count);
-            if (log.isDebugEnabled())
-                log.debug("members count: " + count);
             for (int i = 0; i < count; ++i) {
                 copy(6); // access, name, descriptor
                 int attrCount = readU2();
                 writeU2(attrCount);
-                if (log.isDebugEnabled())
-                    log.debug("member attr count: " + attrCount);
                 copyAttrs(attrCount);
             }
         }
@@ -354,15 +332,11 @@
                 // don't write old SDE
                 if (nameIndex == sdeIndex) {
                     sdeFound = true;
-                    if (log.isDebugEnabled())
-                        log.debug("SDE attr found");
                 } else {
                     writeU2(nameIndex); // name
                     int len = readU4();
                     writeU4(len);
                     copy(len);
-                    if (log.isDebugEnabled())
-                        log.debug("attr len: " + len);
                 }
             }
             return sdeFound;
@@ -441,8 +415,6 @@
                 switch (tag) {
                     case 7 : // Class
                     case 8 : // String
-                        if (log.isDebugEnabled())
-                            log.debug(i + " copying 2 bytes");
                         copy(2);
                         break;
                     case 9 : // Field
@@ -451,15 +423,10 @@
                     case 3 : // Integer
                     case 4 : // Float
                     case 12 : // NameAndType
-                        if (log.isDebugEnabled())
-                            log.debug(i + " copying 4 bytes");
                         copy(4);
                         break;
                     case 5 : // Long
-                    case 6 : // Double
-                        if (log.isDebugEnabled())
-                            log.debug(i + " copying 8 bytes");
-                        copy(8);
+                    case 6 : // Double                        copy(8);
                         i++;
                         break;
                     case 1 : // Utf8
@@ -467,8 +434,6 @@
                         writeU2(len);
                         byte[] utf8 = readBytes(len);
                         String str = new String(utf8, "UTF-8");
-                        if (log.isDebugEnabled())
-                            log.debug(i + " read class attr -- '" + str + "'");
                         if (str.equals(nameSDE)) {
                             sdeIndex = i;
                         }
Index: src/main/java/org/apache/jasper/compiler/Compiler.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/Compiler.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/Compiler.java	(working copy)
@@ -43,8 +43,6 @@
  * @author Mark Roth
  */
 public abstract class Compiler {
-    protected org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
-            .getLog(Compiler.class);
 
     // ----------------------------------------------------------------- Static
 
@@ -102,9 +100,6 @@
 
         t1 = t2 = t3 = t4 = 0;
 
-        if (log.isDebugEnabled()) {
-            t1 = System.currentTimeMillis();
-        }
 
         // Setup page info area
         pageInfo = new PageInfo(new BeanRepository(ctxt.getClassLoader(),
@@ -171,9 +166,6 @@
             // Validate and process attributes
             Validator.validate(this, pageNodes);
 
-            if (log.isDebugEnabled()) {
-                t2 = System.currentTimeMillis();
-            }
 
             // Collect page info
             Collector.collect(this, pageNodes);
@@ -183,10 +175,6 @@
             tfp = new TagFileProcessor();
             tfp.loadTagFiles(this, pageNodes);
 
-            if (log.isDebugEnabled()) {
-                t3 = System.currentTimeMillis();
-            }
-
             // Determine which custom tag needs to declare which scripting vars
             ScriptingVariabler.set(pageNodes, errDispatcher);
 
@@ -210,12 +198,6 @@
             // to be GC'd and save memory.
             ctxt.setWriter(null);
 
-            if (log.isDebugEnabled()) {
-                t4 = System.currentTimeMillis();
-                log.debug("Generated " + javaFileName + " total=" + (t4 - t1)
-                        + " generate=" + (t4 - t3) + " validate=" + (t2 - t1));
-            }
-
         } catch (Exception e) {
             if (writer != null) {
                 try {
@@ -395,10 +377,6 @@
             jsw.setServletClassLastModifiedTime(targetLastModified);
         }
         if (targetLastModified < jspRealLastModified) {
-            if (log.isDebugEnabled()) {
-                log.debug("Compiler: outdated: " + targetFile + " "
-                        + targetLastModified);
-            }
             return true;
         }
 
@@ -465,8 +443,6 @@
             String classFileName = ctxt.getClassFileName();
             if (classFileName != null) {
                 File classFile = new File(classFileName);
-                if (log.isDebugEnabled())
-                    log.debug("Deleting " + classFile);
                 classFile.delete();
             }
         } catch (Exception e) {
@@ -476,8 +452,6 @@
             String javaFileName = ctxt.getServletJavaFileName();
             if (javaFileName != null) {
                 File javaFile = new File(javaFileName);
-                if (log.isDebugEnabled())
-                    log.debug("Deleting " + javaFile);
                 javaFile.delete();
             }
         } catch (Exception e) {
@@ -490,8 +464,6 @@
             String classFileName = ctxt.getClassFileName();
             if (classFileName != null) {
                 File classFile = new File(classFileName);
-                if (log.isDebugEnabled())
-                    log.debug("Deleting " + classFile);
                 classFile.delete();
             }
         } catch (Exception e) {
Index: src/main/java/org/apache/jasper/compiler/AntCompiler.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/AntCompiler.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/AntCompiler.java	(working copy)
@@ -70,8 +70,6 @@
         }
         
         if( options.getCompiler() != null ) {
-            if( log.isDebugEnabled() )
-                log.debug("Compiler " + options.getCompiler() );
             project.setProperty("build.compiler", options.getCompiler() );
         }
         project.init();
@@ -109,9 +107,6 @@
         throws FileNotFoundException, JasperException, Exception {
         
         long t1 = 0;
-        if (log.isDebugEnabled()) {
-            t1 = System.currentTimeMillis();
-        }
 
         String javaEncoding = ctxt.getOptions().getJavaEncoding();
         String javaFileName = ctxt.getServletJavaFileName();
@@ -144,9 +139,6 @@
             info.append("    cp=" + repository + "\n");
         }
         
-        if( log.isDebugEnabled() )
-            log.debug( "Using classpath: " + System.getProperty("java.class.path") + sep
-                    + classpath);
         
         // Initializing sourcepath
         Path srcPath = new Path(project);
@@ -221,8 +213,6 @@
             }
         } catch (BuildException e) {
             be = e;
-            log.error( "Javac exception ", e);
-            log.error( "Env: " + info.toString());
         }
         
         errorReport.append(logger.getReport());
@@ -241,8 +231,6 @@
         
         if (be != null) {
             String errorReportString = errorReport.toString();
-            log.error("Error compiling file: " + javaFileName + " "
-                    + errorReportString);
             JavacErrorDetail[] javacErrors = ErrorDispatcher.parseJavacErrors(
                     errorReportString, javaFileName, pageNodes);
             if (javacErrors != null) {
@@ -252,11 +240,6 @@
             }
         }
         
-        if( log.isDebugEnabled() ) {
-            long t2=System.currentTimeMillis();
-            log.debug("Compiled " + ctxt.getServletJavaFileName() + " "
-                      + (t2-t1) + "ms");
-        }
         
         logger = null;
         project = null;
Index: src/main/java/org/apache/jasper/compiler/JspReader.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/JspReader.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/JspReader.java	(working copy)
@@ -26,8 +26,6 @@
 import java.net.URL;
 import java.net.MalformedURLException;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 
@@ -52,7 +50,6 @@
     /**
      * Logger.
      */
-    private Log log = LogFactory.getLog(JspReader.class);
 
     /**
      * The current spot in the file.
@@ -577,9 +574,6 @@
                 try {
                     reader.close();
                 } catch (Exception any) {
-                    if(log.isDebugEnabled()) {
-                        log.debug("Exception closing reader: ", any);
-                    }
                 }
             }
 
@@ -602,7 +596,6 @@
                                    longName, encoding);
             }
         } catch (Throwable ex) {
-            log.error("Exception parsing file ", ex);
             // Pop state being constructed:
             popFile();
             err.jspError("jsp.error.file.cannot.read", file);
@@ -611,9 +604,7 @@
                 try {
                     reader.close();
                 } catch (Exception any) {
-                    if(log.isDebugEnabled()) {
-                        log.debug("Exception closing reader: ", any);
-                    }
+                    
                 }
             }
         }
Index: src/main/java/org/apache/jasper/compiler/TldLocationsCache.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/TldLocationsCache.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/TldLocationsCache.java	(working copy)
@@ -35,8 +35,6 @@
 
 import javax.servlet.ServletContext;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.xmlparser.ParserUtils;
@@ -78,7 +76,6 @@
 public class TldLocationsCache {
 
     // Logger
-    private Log log = LogFactory.getLog(TldLocationsCache.class);
 
     /**
      * The types of URI one may specify for a tag library
@@ -271,19 +268,11 @@
                 try {
                     uri = new URL(FILE_PROTOCOL+altDDName.replace('\\', '/'));
                 } catch (MalformedURLException e) {
-                    if (log.isWarnEnabled()) {
-                        log.warn(Localizer.getMessage(
-                                            "jsp.error.internal.filenotfound",
-                                            altDDName));
-                    }
+                  
                 }
             } else {
                 uri = ctxt.getResource(WEB_XML);
-                if (uri == null && log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                                            "jsp.error.internal.filenotfound",
-                                            WEB_XML));
-                }
+                
             }
 
             if (uri == null) {
Index: src/main/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
===================================================================
--- src/main/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java	(revision 378)
+++ src/main/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java	(working copy)
@@ -43,8 +43,6 @@
 import javax.servlet.jsp.tagext.ValidationMessage;
 import javax.servlet.jsp.tagext.VariableInfo;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.xmlparser.ParserUtils;
@@ -62,7 +60,6 @@
 class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
 
     // Logger
-    private Log log = LogFactory.getLog(TagLibraryInfoImpl.class);
 
     private Hashtable jarEntries;
 
@@ -260,10 +257,6 @@
             } else if ("taglib-extension".equals(tname)) {
                 // Recognized but ignored
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.taglib", tname));
-                }
             }
 
         }
@@ -395,10 +388,6 @@
             } else if ("tag-extension".equals(tname)) {
                 // Ignored
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.tag", tname));
-                }
             }
         }
 
@@ -456,10 +445,6 @@
             } else if ("tag-extension".equals(tname)) {
                 // Ignore <tag-extension> element: Bugzilla 33538
             } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.tagfile", tname));
-                }
             }
         }
 
@@ -542,12 +527,7 @@
             } else if ("description".equals(tname) || // Ignored elements
             false) {
                 ;
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.attribute", tname));
-                }
-            }
+            } 
         }
 
         if (isFragment) {
@@ -608,12 +588,7 @@
                 }
             } else if ("description".equals(tname) || // Ignored elements
             false) {
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.variable", tname));
-                }
-            }
+            } 
         }
         return new TagVariableInfo(nameGiven, nameFromAttribute, className,
                 declare, scope);
@@ -636,12 +611,7 @@
                 initParams.put(initParam[0], initParam[1]);
             } else if ("description".equals(tname) || // Ignored elements
             false) {
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.validator", tname));
-                }
-            }
+            } 
         }
 
         TagLibraryValidator tlv = null;
@@ -674,12 +644,7 @@
                 initParam[1] = element.getBody();
             } else if ("description".equals(tname)) {
                 ; // Do nothing
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.initParam", tname));
-                }
-            }
+            } 
         }
         return initParam;
     }
@@ -704,12 +669,7 @@
             } else if ("display-name".equals(tname) || // Ignored elements
                     "small-icon".equals(tname) || "large-icon".equals(tname)
                     || "description".equals(tname) || "example".equals(tname)) {
-            } else {
-                if (log.isWarnEnabled()) {
-                    log.warn(Localizer.getMessage(
-                            "jsp.warning.unknown.element.in.function", tname));
-                }
-            }
+            } 
         }
 
         return new FunctionInfo(name, klass, signature);
Index: src/main/java/org/apache/jasper/xmlparser/UTF8Reader.java
===================================================================
--- src/main/java/org/apache/jasper/xmlparser/UTF8Reader.java	(revision 378)
+++ src/main/java/org/apache/jasper/xmlparser/UTF8Reader.java	(working copy)
@@ -30,9 +30,6 @@
 public class UTF8Reader
     extends Reader {
 
-    private org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( UTF8Reader.class );
-    
     //
     // Constants
     //
@@ -208,8 +205,6 @@
 
         // return character
         if (DEBUG_READ) {
-            if (log.isDebugEnabled())
-                log.debug("read(): 0x"+Integer.toHexString(c));
         }
         return c;
 
@@ -493,8 +488,6 @@
 
         // return number of characters converted
         if (DEBUG_READ) {
-            if (log.isDebugEnabled())
-                log.debug("read(char[],"+offset+','+length+"): count="+count);
         }
         return count;
 
Index: src/main/java/org/apache/jasper/xmlparser/ParserUtils.java
===================================================================
--- src/main/java/org/apache/jasper/xmlparser/ParserUtils.java	(revision 378)
+++ src/main/java/org/apache/jasper/xmlparser/ParserUtils.java	(working copy)
@@ -23,8 +23,6 @@
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.compiler.Localizer;
@@ -191,7 +189,6 @@
 class MyEntityResolver implements EntityResolver {
 
     // Logger
-    private Log log = LogFactory.getLog(MyEntityResolver.class);
 
     public InputSource resolveEntity(String publicId, String systemId)
             throws SAXException {
@@ -209,10 +206,6 @@
                 return isrc;
             }
         }
-        if (log.isDebugEnabled())
-            log.debug("Resolve entity failed" + publicId + " " + systemId);
-        log.error(Localizer.getMessage("jsp.error.parse.xml.invalidPublicId",
-                publicId));
         return null;
     }
 }
@@ -220,11 +213,7 @@
 class MyErrorHandler implements ErrorHandler {
 
     // Logger
-    private Log log = LogFactory.getLog(MyErrorHandler.class);
-
     public void warning(SAXParseException ex) throws SAXException {
-        if (log.isDebugEnabled())
-            log.debug("ParserUtils: warning ", ex);
         // We ignore warnings
     }
 
Index: src/main/java/org/apache/jasper/xmlparser/UCSReader.java
===================================================================
--- src/main/java/org/apache/jasper/xmlparser/UCSReader.java	(revision 378)
+++ src/main/java/org/apache/jasper/xmlparser/UCSReader.java	(working copy)
@@ -30,9 +30,6 @@
  */
 public class UCSReader extends Reader {
 
-    private org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( UCSReader.class );
-    
     //
     // Constants
     //
@@ -123,8 +120,6 @@
             int b3 = fInputStream.read() & 0xff;
             if (b3 == 0xff)
                 return -1;
-            if (log.isDebugEnabled())
-                log.debug("b0 is " + (b0 & 0xff) + " b1 " + (b1 & 0xff) + " b2 " + (b2 & 0xff) + " b3 " + (b3 & 0xff));
             if (fEncoding == UCS4BE)
                 return (b0<<24)+(b1<<16)+(b2<<8)+b3;
             else
