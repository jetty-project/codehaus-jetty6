<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// ========================================================================
// Copyright (c) Webtide LLC
// 
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// and Apache License v2.0 which accompanies this distribution.
//
// The Eclipse Public License is available at 
// http://www.eclipse.org/legal/epl-v10.html
//
// The Apache License v2.0 is available at
// http://www.apache.org/licenses/LICENSE-2.0.txt
//
// You may elect to redistribute this code under either of these licenses. 
// ========================================================================
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.mortbay.jetty.verifier.tests</groupId>
    <artifactId>tests-parent</artifactId>
    <version>7.3.1-SNAPSHOT</version>
  </parent>
  <artifactId>dummy-scm-lib</artifactId>
  <!-- POM is correct, we build up the jar manually below -->
  <packaging>pom</packaging>
  <name>Jetty :: Verifier Tests :: Dummy SCM Lib</name>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <!-- Create Various SCM files, works even if project
                 is forked, or uses git-svn, or is even compiled via
                 a tarball distribution -->
            <id>create-scm-files</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <property name="outdir" value="${project.build.directory}/generated-scm-resources" />
                <mkdir dir="${outdir}/CVS" />
                <touch file="${outdir}/.cvsignore" />
                <mkdir dir="${outdir}/.svn" />
                <mkdir dir="${outdir}/_svn" />
                <mkdir dir="${outdir}/.git" />
                <touch file="${outdir}/.gitignore" />
                <mkdir dir="${outdir}/RCS" />
                <mkdir dir="${outdir}/SCCS" />
                <touch file="${outdir}/vssver.scc" />
                <mkdir dir="${outdir}/.arch-ids" />
                <mkdir dir="${outdir}/.bzr" />
                <touch file="${outdir}/.MySCMServerInfo" />
                <mkdir dir="${outdir}/.hg" />
                <mkdir dir="${outdir}/BitKeeper" />
                <mkdir dir="${outdir}/ChangeSet" />
                <mkdir dir="${outdir}/_darcs" />
                <mkdir dir="${outdir}/.darcs" />
                <mkdir dir="${outdir}/.darcsrepo" />
                <touch file="${outdir}/.darcs-temp-mail" />
                <copy file="${basedir}/src/main/resources/README.txt"
                      todir="${outdir}" />

                <!-- Generating JAR file here as Maven is too smart and
                     won't allow you to create JAR files with SCM content in it.
                  -->
                <jar destfile="${project.build.directory}/${project.artifactId}-${project.version}.jar"
                     basedir="${outdir}"
                     includes="**/*"
                     defaultexcludes="false"
                     />
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <!-- Make sure Manually build JAR is attached to the project
                 so that it can get deployed and/or released to a repo -->
            <id>attach-scm-lib</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}.jar</file>
                  <type>jar</type>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
